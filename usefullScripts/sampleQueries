/////////////////FOR PHASE1//////////////////////////////////////////////////////////////////////

match  (p1:Person {name:'Jagrutee'})-[r1:Rated]->(m:Recipe)<-[r2:Rated]-(p2:Person {name:'Vishakha'})
  RETURN m.name AS Recipe, r1.rating AS JagruteeRating, r2.rating AS VishakhaRating

NOT RATED

MATCH    (b:Person)-[r:Rated]->(m:Recipe),
(a:Person {name:'Jagrutee'})
WHERE    NOT((a)-[:Rated]->(m))
RETURN m,r,b


//Update relationship properties
MATCH (a:Person)-[r]-(b:Recipe)
 WHERE a.name = 'Sudarshana' AND b.id = '95358'
 set r.rating=8



//////////////////////////////////////////////////////////////////////////////////////////////
//get db schema
CALL db.schema()

//delete all nodes and relationships
MATCH (n) DETACH DELETE n;

//delete specific node
MATCH (n:Person { name: 'UNKNOWN' })
DELETE n


//C:\Users\320069346\Documents\sudsWorkspace\nodejsWork\learnings\MLWithGraph\allData.josn
/home/sudarshana/Documents/suduWorkspace/MLWithGraph/allData.json
MATCH (i:Ingredient) 
WHERE i.name CONTAINS 'almond' 
RETURN i.name as Almonds ORDER BY Almonds


//relationships
(Person)-[:RATED {rating:00}]->(Movie)

MATCH (a:Person),(b:Person)
WHERE a.name = 'A' AND b.name = 'B'
CREATE (a)-[r:RELTYPE { name: a.name + '<->' + b.name }]->(b)
RETURN type(r), r.name

MATCH (a:Person),(b:Recipe)
WHERE a.name = 'A' AND b.name = 'B'
CREATE (a)-[r:Rated { rating:5 }]->(b)
RETURN type(r), r.name

//Assign Similarity
MATCH (p1:Person)-[x:Rated]->(m:Recipe)<-[y:Rated]-(p2:Person)
WITH  SUM(x.rating * y.rating) AS xyDotProduct,
      SQRT(REDUCE(xDot = 0.0, a IN COLLECT(x.rating) | xDot + a^2)) AS xLength,
      SQRT(REDUCE(yDot = 0.0, b IN COLLECT(y.rating) | yDot + b^2)) AS yLength,
      p1, p2
MERGE (p1)-[s:SIMILARITY]-(p2)
SET   s.similarity = xyDotProduct / (xLength * yLength)


//To get a person has rated which recipes:
MATCH (:Person {name: 'Pradnya'})-[r:Rated]-(b) RETURN r,b
//
MATCH (:Recipe {name: 'Citrus peach cooler'})-[r:Rated]-(b) RETURN r,b

//To delete a relationship
       MATCH (n { name: 'Abhishek' })-[r:Rated]->()
       DELETE r

//get data
match  (p1:Person {name:'Nilesh'})-[r1:Rated]->(m:Recipe)<-[r2:Rated]-(p2:Person {name:'Sudarshana'})
(p3:Person {name:'Jagrutee'})-[r3:Rated]->(m:Recipe)<-[r4:Rated]-(p4:Person {name:'Sudarshana'})
  RETURN m.name AS Recipe, r1.rating AS NileshRate, r2.rating AS SudduRate,r3.rating AS jagz

match  (p1:Person {name:'Nilesh'})-[r1:Rated]->(m:Recipe)<-[r2:Rated]-(p2:Person {name:'Sudarshana'}),
(p3:Person {name:'Nilesh'})-[r3:Rated]->(m:Recipe)<-[r4:Rated]-(p4:Person {name:'Abhishek'}),
(p3:Person {name:'Nilesh'})-[r5:Rated]->(m:Recipe)<-[r6:Rated]-(p5:Person {name:'Jagrutee'})
  RETURN m.name AS Recipe, r1.rating AS NileshRate, r2.rating AS SudduRate,r4.rating AS abhi ,r6.rating AS jagz


//Get SIMILARITY
MATCH    (p1:Person {name:'Sudarshana'})-[s:SIMILARITY]-(p2:Person)
WITH     p2, s.similarity AS sim
ORDER BY sim DESC
LIMIT    5
RETURN   p2.name AS Neighbor, sim AS Similarity

//Get recommendation
MATCH    (b:Person)-[r:Rated]->(m:Recipe), (b)-[s:SIMILARITY]-(a:Person {name:'Jagrutee'})
WHERE    NOT((a)-[:Rated]->(m))
WITH     m, s.similarity AS similarity, r.rating AS rating
ORDER BY m.name, similarity DESC
WITH     m.name AS recipe, COLLECT(rating)[0..3] AS ratings
WITH     recipe, REDUCE(s = 0, i IN ratings | s + i)*1.0 / LENGTH(ratings) AS reco
ORDER BY reco DESC
RETURN   recipe AS Recipe, reco AS Recommendation

//Get a perticulat node
MATCH (n:Person{ name: 'Nilesh' }) RETURN n

CREATE (a:Person {name: $name}) RETURN a

-------------------------------------query----------------------------------------------------
----------------------------------------------------------------------------------------------

MATCH (r:Recipe)
WHERE (r)-[:CONTAINS_INGREDIENT]->(:Ingredient {name: "chilli"})
RETURN r.name AS recipe, 
       [(r)-[:CONTAINS_INGREDIENT]->(i) | i.name] 
       AS ingredients

-------------------------------------query----------------------------------------------------
----------------------------------------------------------------------------------------------
CREATE INDEX ON :Recipe(id);
CREATE INDEX ON :Ingredient(name);
CREATE INDEX ON :Keyword(name);
CREATE INDEX ON :DietType(name);
CREATE INDEX ON :Author(name);
CREATE INDEX ON :Collection(name);
:params jsonFile => "C:\Users\320069346\Documents\sudsWorkspace\nodejsWork\learnings\MLWithGraph\allData.json";
CALL apoc.load.json($jsonFile) YIELD value
WITH value.page.article.id AS id,
       value.page.title AS title,
       value.page.article.description AS description,
       value.page.recipe.cooking_time AS cookingTime,
       value.page.recipe.prep_time AS preparationTime,
       value.page.recipe.skill_level AS skillLevel
MERGE (r:Recipe {id: id})
SET r.cookingTime = cookingTime,
    r.preparationTime = preparationTime,
    r.name = title,
    r.description = description,
    r.skillLevel = skillLevel;
CALL apoc.load.json($jsonFile) YIELD value
WITH value.page.article.id AS id,
       value.page.article.author AS author
MERGE (a:Author {name: author})
WITH a,id
MATCH (r:Recipe {id:id})
MERGE (a)-[:WROTE]->(r);
CALL apoc.load.json($jsonFile) YIELD value
WITH value.page.article.id AS id,
       value.page.recipe.ingredients AS ingredients
MATCH (r:Recipe {id:id})
FOREACH (ingredient IN ingredients |
  MERGE (i:Ingredient {name: ingredient})
  MERGE (r)-[:CONTAINS_INGREDIENT]->(i)
);
CALL apoc.load.json($jsonFile) YIELD value
WITH value.page.article.id AS id,
       value.page.recipe.keywords AS keywords
MATCH (r:Recipe {id:id})
FOREACH (keyword IN keywords |
  MERGE (k:Keyword {name: keyword})
  MERGE (r)-[:KEYWORD]->(k)
);
CALL apoc.load.json($jsonFile) YIELD value
WITH value.page.article.id AS id,
       value.page.recipe.diet_types AS dietTypes
MATCH (r:Recipe {id:id})
FOREACH (dietType IN dietTypes |
  MERGE (d:DietType {name: dietType})
  MERGE (r)-[:DIET_TYPE]->(d)
);
CALL apoc.load.json($jsonFile) YIELD value
WITH value.page.article.id AS id,
       value.page.recipe.collections AS collections
MATCH (r:Recipe {id:id})
FOREACH (collection IN collections |
  MERGE (c:Collection {name: collection})
  MERGE (r)-[:COLLECTION]->(c)
);

-------------------------------------query----------------------------------------------------
----------------------------------------------------------------------------------------------

MERGE (PaneerLazeez:Recipe {id: 19898})
  SET PaneerLazeez.cookingTime = 8966,
      PaneerLazeez.preparationTime = 676,
      PaneerLazeez.name = 'PaneerLazeez',
      PaneerLazeez.description = "test",
      PaneerLazeez.skillLevel = 'Easy';
    WITH ['as','dsd'] AS ingredients
    FOREACH (ingredient IN ingredients |
     MERGE (i:Ingredient {name: ingredient})
     MERGE (PaneerLazeez)-[:CONTAINS_INGREDIENT]->(i)
   );